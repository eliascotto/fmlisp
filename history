#V2
(read-string "(+ 1 2))))))")
(all-ns)
(ns fmlisp.core)
(not true)
(all-ns)
(do (ns fmlisp.core) (def not (fn [a] (if a false true))))
(all-ns)
(do (ns fmlisp.core) (def not (fn [a] (if a false true))))
(all-ns)
(not true)
(all-ns)
(refer fmlisp.core)
(refer 'fmlisp.core)
(not true)
(ns fmlisp.core)
(ns-map)
(ns-map 'fmlisp.core)
(not true)
not
(var not)
(var list)
(var first)
(ns 'fmlisp.core)
(ns fmlisp.core)
(var first)
(def first 1)
(var first)
(def first 3)
(var first)
first
user/first
fmlisp.lang/first
(var first)
(ns-map)
(ns-map 'user)
(all-ns)
(var first)
(def first 1)
first
(var first)
(ns fmlisp.core)
(ns-map *ns*)
(not false)
(ns user)
(var not)
(refer 'fmlisp.core)
(not true)
first
(var first)
(throw "foo")
(error "This is a test")
(fmlisp.lang/error "This is a test")
(type (fmlisp.lang/error "This is a test"))
(fmlisp.lang/type (fmlisp.lang/error "This is a test"))
(fmlisp.lang/error "This is a test")
(type (fmlisp.lang/error "This is a test"))
(fmlisp.lang/type (fmlisp.lang/error "This is a test"))
[1 2 (error "fofl")]
"foo"
[1 2 (error "fofl")]
(throw (error "foo"))
(throw "foo")
(throw (error "foo"))
(error "foo")
(throw (error "foo"))
(def\n  ^{:macro true\n    :added "1.0"}\n  let (fn let [&form &env & decl] (cons 'let* decl)))
(def\n  ^{:macro true\n    :added "1.0"}\n  let (fn [&form &env & decl] (cons 'let* decl)))
let
(meta let)
(meta 'let)
(meta user/let)
(meta #'user/let)
(fmlisp.lang/meta 'let)
(fmlisp.lang/meta let)
(fmlisp.lang/meta #'user/let)
(macroexpand '(let [a 1]))
(def\n  ^{:macro true\n    :added "1.0"}\n  let (fn [&form &env & decl] (cons 'let* decl)))
(macroexpand '(let [a 1]))
(let [a 1])
(let [b 3])
(let [b 3] (+ 1 2))
(let [b 3] (fn 1 2))
(let [b 3] (fn [] 1 2))
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [&form &env & decl] (cons 'let* decl)))
(fr [b 3] (fn [] 1 2))
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [&form &env & decl] (cons 'let* decl)))
(fr [b 3] (fn [] 1 2))
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [&form &env & decl] (cons 'let* decl)))
(fr [b 3] (fn [] 1 2))
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [&form &env & decl] (cons 'let* decl)))
(fr [b 3] (fn [] 1 2))
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [&form &env & decl] (cons 'let* decl)))
(fr [b 3] (fn [] 1 2))
(fr [b 3])
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [&form &env & decl] (cons 'let* decl)))
(fr [b 3])
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [& decl] (cons 'let* decl)))
(fr [b 3])
(def\n  ^{:macro true\n    :added "1.0"}\n  fr (fn [& decl] (cons 'let* decl)))
(fr [b 3])
