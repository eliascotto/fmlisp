#V2
(refer 'foo)
x
(ns user)
(refer 'foo)
x
(def x 2)
(ns foo)
(def x 3)
(ns user)
(refer 'foo)
x
(def x 3)
(ns foo)
(def y 4)
(ns user)
(refer 'foo)
x
y
x
(def ^:private x 3)
(meta #'x)
(ns foo)
(ns user)
(all-ns)
(ns foo)
(ns user)
(the-ns 'foo)
(ns-map (the-ns 'foo))
(ns foo)
(def x 1)
(ns user)
(ns-map (the-ns 'foo))
(type 12)
(type (type 12))
(instance? 'Integer 12)
(instance? 'Integer 12.4)
(def ^:private prv 1)
(private? prv)
(meta prv)
(meta #'prv)
(intern 'user 'sum (fn [a b c] (+ a b c)))
(sum 1 2 3)
((fn [a b c] (+ a b c)) 1 2 3)
(+ 1 2 3)
(def bar (fn [a] {:foo (get a :foo)}))
(bar {:foo (fn [x] x)})
x
(all-ns)
(fmlisp.core/all-ns)
(ns-map)
not
(not false)
(all-ns)
(type #'all-ns)
(all-ns)
(ns-map)
#'fmlisp.core/all-ns
(fmlisp.core/all-ns)
(all-ns)
(fmlisp.core/all-ns)
all-ns
*ns*
(ns-map)
(ns-map 'user)
(ns-map user)
(ns-map 'fmlisp.core)
(ns-map 'user)
(def x 2)
x
(def x 3)
x
(def x 2)
(ns-map)
(ns-map 'user)
x
(def x 3)
x
(ns-map 'user)
user/x
x
(def x 2)
x
(print-debug x)
(def x 3)
x
(print-debug x)
(def x 2)
(print-debug x)
(def x 3)
(print-debug x)
(def x 2)
(def x 3)
(def x 2)
(def x 3)
(def x 2)
(def x 3)
x
(list)
ok
'ok
