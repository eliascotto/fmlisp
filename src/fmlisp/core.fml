(ns
;^{:doc "The core FMLisp language."
;      :author "Elia Scotto"}
 fmlisp.core)

(def
  ^{:arglists '([message])
    :doc "Creates a new error with `message` as cause."
    :added "1.0"}
  error fmlisp.lang/error)

(def
  ^{:arglists '([& items])
    :doc "Creates a new list containing the items."
    :added "1.0"}
  list fmlisp.lang/list)

(def
  ^{:arglists '([x seq])
    :doc "Returns a new seq where x is the first element and seq is the rest."
    :added "1.0"
    :static true}
  cons fmlisp.lang/cons)

(def
  ^{:arglists '([coll])
    :doc "Creates a new vector containing the contents of coll."
    :added "1.0"}
  vec fmlisp.lang/vec)

(def
  ^{:arglists '([coll])
    :doc "Creates a new vector containing the contents of coll."
    :added "1.0"}
  concat fmlisp.lang/concat)

;; ========= Temp macros

(def
  ^{:macro true
    :added "1.0"}
  let (fn* let [& decl] (cons 'let* decl)))

(def
  ^{:macro true
    :added "1.0"}
  loop (fn* loop [& decl] (cons 'loop* decl)))

(def
  ^{:macro true
    :added "1.0"}
  fn (fn* fn [& decl] (cons 'fn* decl)))

(def
  ^{:arglists '([coll])
    :doc "Returns the first item in the collection.
    If coll is nil, returns nil."
    :added "1.0"
    :static true}
  first fmlisp.lang/first)

(def
  ^{:arglists '([coll])
    :doc "Same as (first (next x))"
    :added "1.0"}
  second fmlisp.lang/second)

(def
  ^{:arglists '([coll])
    :doc "Returns a seq of the items after the first.
    If there are no more items, returns nil."
    :added "1.0"}
  next fmlisp.lang/next)

(def
  ^{:arglists '([coll])
    :tag clojure.lang.ISeq
    :doc "Returns a possibly empty seq of the items after the first."
    :added "1.0"}
  rest fmlisp.lang/rest)

(def
  ^{:doc "Same as (first (first x))"
    :arglists '([x])
    :added "1.0"}
  ffirst (fn ffirst [x] (first (first x))))

(def
  ^{:doc "Same as (next (first x))"
    :arglists '([x])
    :added "1.0"}
  nfirst (fn nfirst [x] (next (first x))))

(def
  ^{:doc "Same as (first (next x))"
    :arglists '([x])
    :added "1.0"}
  fnext (fn fnext [x] (first (next x))))

(def
  ^{:doc "Same as (next (next x))"
    :arglists '([x])
    :added "1.0"}
  nnext (fn nnext [x] (next (next x))))

(def
  ^{:arglists '([] [coll] [coll x] [coll x & xs])
    :doc "conj[oin]. Returns a new collection with the xs
    'added'. (conj nil item) returns (item).
    (conj coll) returns coll. (conj) returns [].
    The 'addition' may happen at different 'places' depending
    on the concrete type."
    :added "1.0"}
  conj fmlisp.lang/conj)

(def
  ^{:arglists '([coll])
    :doc "Returns a seq on the collection. If the collection is
    empty, returns nil.  (seq nil) returns nil. seq also works on
    Strings. Note that seqs cache values, thus seq
    should not be used on any Iterable whose iterator repeatedly
    returns the same mutable object."
    :added "1.0"
    :static true}
  seq fmlisp.lang/seq)

(def
  ^{:arglists '([coll])
    :doc "Returns a seq on the collection. If the collection is
    empty, returns nil.  (seq nil) returns nil. seq also works on
    Strings. Note that seqs cache values, thus seq
    should not be used on any Iterable whose iterator repeatedly
    returns the same mutable object."
    :added "1.0"
    :static true}
  seq? fmlisp.lang/seq?)

(def
  ^{:arglists '([t x])
    :doc "Evaluates `x` and tests if it is a value of type `t`.
    Returns `true` or `false`"
    :added "1.0"}
  is? fmlisp.lang/is?)

(def
  ^{:arglists '([message])
    :doc "Creates a new error with a message."
    :added "1.0"}
  error fmlisp.lang/error)

(def
  ^{:arglists '([x])
    :doc "Return true if x is a Character"
    :added "1.0"
    :static true}
  char? fmlisp.lang/char?)

(def
  ^{:arglists '([x])
    :doc "Return true if x is a String"
    :added "1.0"
    :static true}
  string? fmlisp.lang/string?)

(def
  ^{:arglists '([x])
    :doc "Return true if x implements a HashMap"
    :added "1.0"
    :static true}
  map? fmlisp.lang/map?)

(def
  ^{:arglists '([x])
    :doc "Return true if x implements a Vector"
    :added "1.0"
    :static true}
  vector? fmlisp.lang/vector?)

(def
  ^{:arglists '([coll])
    :doc "Return the last item in coll"
    :added "1.0"}
  last fmlisp.lang/last)

(def
  ^{:arglists '([coll])
    :doc "Return a seq of all but the last item in coll, in linear time"
    :added "1.0"
    :static true}
  butlast fmlisp.lang/butlast)

(def
  ^{:arglists '([map key val] [map key val & kvs])
    :doc "assoc[iate]. When applied to a map, returns a new map of the
    same (hashed/sorted) type, that contains the mapping of key(s) to
    val(s). When applied to a vector, returns a new vector that
    contains val at index. Note - index must be <= (count vector)."
    :added "1.0"
    :static true}
  assoc
  (fn ^:static assoc
    ([map key val] (fmlisp.lang/assoc map key val))
    ([map key val & kvs]
     (let [ret (fmlisp.lang/assoc map key val)]
       (if kvs
         (if (next kvs)
           (assoc ret (first kvs) (second kvs) (nnext kvs))
           (throw (error "assoc expects even number of arguments after map/vector, found odd number")))
         ret)))))

;; metadata

(def
  ^{:arglists '([x])
    :doc "Returns the metadata of `x`, returns nil if there is no metadata."
    :added "1.0"
    :static true}
  meta fmlisp.lang/meta)

(def
  ^{:arglists '([x m])
    :doc "Returns an object of the same type and value as `x`, with
    map m as its metadata."
    :added "1.0"}
  with-meta fmlisp.lang/with-meta)

(def
  ^{:arglist '([var])
    :doc "Turns the Var from a function to a Macro."
    :added "1.0"}
  set-macro fmlisp.lang/set-macro)

(def ^{:private true :dynamic true}
  assert-valid-fdecl (fn [fdecl]))

(def println fmlisp.lang/println)
(def prn fmlisp.lang/println)

(def
  ^{:private true}
  sigs
  (fn [fdecl]
    (assert-valid-fdecl fdecl)
    (let [asig
          (fn [fdecl]
            (let [arglist (first fdecl)
                  body (next fdecl)]
              (if (map? (first body))
                (if (next body)
                  (with-meta arglist (conj (if (meta arglist) (meta arglist) {}) (first body)))
                  arglist)
                arglist)))]
      (if (seq? (first fdecl))
        (loop [ret [] fdecls fdecl]
          (if fdecls
            (recur (conj ret (asig (first fdecls))) (next fdecls))
            (seq ret)))
        (list (asig fdecl))))))

(def

  ^{:doc "Same as (def name (fn [params* ] exprs*)) or (def
    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
    to the var metadata. prepost-map defines a map with optional keys
    :pre and :post that contain collections of pre or post conditions."
    :arglists '([name doc-string? attr-map? [params*] prepost-map? body]
                [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?])
    :macro true
    :added "1.0"}
  defn (fn defn [name & fdecl]
        ;; Note: Cannot delegate this check to def because of the call to (with-meta name ..)
         (if (is? 'Symbol name)
           nil
           (throw (error "First argument to defn must be a symbol")))
         (let [m (if (string? (first fdecl))
                   {:doc (first fdecl)}
                   {})
               fdecl (if (string? (first fdecl))
                       (next fdecl)
                       fdecl)
               m (if (map? (first fdecl))
                   (conj m (first fdecl))
                   m)
               fdecl (if (map? (first fdecl))
                       (next fdecl)
                       fdecl)
               fdecl (if (vector? (first fdecl))
                       (list fdecl)
                       fdecl)
               m (if (map? (last fdecl))
                   (conj m (last fdecl))
                   m)
               fdecl (if (map? (last fdecl))
                       (butlast fdecl)
                       fdecl)
               m (conj {:arglists (list 'quote (sigs fdecl))} m)
               m (let [inline (:inline m)
                       ifn (first inline)
                       iname (second inline)]
                  ;; same as: (if (and (= 'fn ifn) (not (symbol? iname))) ...)
                   (if (if (fmlisp.lang/= 'fn ifn)
                         (if (is? 'Symbol iname) false true))
                    ;; inserts the same fn name to the inline fn if it does not have one
                     (assoc m :inline (cons ifn (cons (fmlisp.lang/intern (fmlisp.lang.string/concat (fmlisp.lang/get-name name) "__inliner"))
                                                      (next inline))))
                     m))
               m (conj (if (meta name) (meta name) {}) m)]
           (list 'def (with-meta name m)
                ;;todo - restore propagation of fn name
                ;;must figure out how to convey primitive hints to self calls first
                 (cons `fn fdecl)
                 ;; (with-meta (cons `fn fdecl) {:rettag (:tag m)})
                 ))))

(def
  ^{:added "1.0"
    :static true}
  vector
  "Creates a new vector containing the args."
  fmlisp.lang/vector)

(defn vec
  "Creates a new vector containing the contents of coll."
  {:added "1.0"
   :static true}
  ([coll]
   (fmlisp.lang/vec coll)))

(defn hash-map
  "keyval => key val
  Returns a new hash map with supplied mappings. If any keys are
  equal, they are handled as if by repeated uses of assoc."
  {:added "1.0"
   :static true}
  ([] {})
  ([& keyvals]
   (fmlisp.lang/hash-map keyvals)))

(defn hash-set
  "Returns a new hash set with supplied keys. Any equal keys are
  handled as if by repeated uses of conj."
  {:added "1.0"
   :static true}
  ([] #{})
  ([& keys]
   (fmlisp.lang/hash-set keyvals)))

(defn sorted-map
  "keyval => key val
  Returns a new sorted map with supplied mappings.  If any keys are
  equal, they are handled as if by repeated uses of assoc."
  {:added "1.0"
   :static true}
  ([& keyvals]
   (fmlisp.lang/sorted-map keyvals)))

(defn sorted-set
  "Returns a new sorted set with supplied keys.  Any equal keys are
  handled as if by repeated uses of conj."
  {:added "1.0"
   :static true}
  ([& keys]
   (fmlisp.lang/sorted-set keys)))

(defn nil?
  "Returns true if x is nil, false otherwise."
  {:tag Boolean
   :added "1.0"
   :static true
   :inline (fn [x] (list 'fmlisp.lang/nil? x))}
  [x] (fmlisp.lang/nil? x))

(def

  ^{:doc "Like defn, but the resulting function name is declared as a
  macro and will be used as a macro by the compiler when it is
  called."
    :arglists '([name doc-string? attr-map? [params*] body]
                [name doc-string? attr-map? ([params*] body) + attr-map?])
    :macro true
    :added "1.0"}
  defmacro (fn [name & args]
             (let [prefix (loop [p (list name) args args]
                            (let [f (first args)]
                              (if (string? f)
                                (recur (cons f p) (next args))
                                (if (map? f)
                                  (recur (cons f p) (next args))
                                  p))))
                   fdecl (loop [fd args]
                           (if (string? (first fd))
                             (recur (next fd))
                             (if (map? (first fd))
                               (recur (next fd))
                               fd)))
                   fdecl (if (vector? (first fdecl))
                           (list fdecl)
                           fdecl)
                   add-implicit-args (fn [fd]
                                       (let [args (first fd)]
                                         (cons (vec args) (next fd))))
                   add-args (fn [acc ds]
                              (if (nil? ds)
                                acc
                                (let [d (first ds)]
                                  (if (map? d)
                                    (conj acc d)
                                    (add-args (conj acc (add-implicit-args d)) (next ds))))))
                   fdecl (seq (add-args [] fdecl))
                   decl (loop [p prefix d fdecl]
                          (if p
                            (recur (next p) (cons (first p) d))
                            d))]
               (list 'do
                     (cons `defn decl)
                     (list 'set-macro (list 'var name))))))

(defmacro when
  "Evaluates test. If logical true, evaluates body in an implicit do."
  {:added "1.0"}
  [test & body]
  (list 'if test (cons 'do body)))

(defmacro when-not
  "Evaluates test. If logical false, evaluates body in an implicit do."
  {:added "1.0"}
  [test & body]
  (list 'if test nil (cons 'do body)))

(def ^{:added "1.0"}
  false?
  "Returns true if x is the value false, false otherwise."
  fmlisp.lang/false?)

(def ^{:added "1.0"}
  true?
  "Returns true if x is the value true, false otherwise."
  fmlisp.lang/true?)

(defn boolean?
  "Return true if x is a Boolean"
  {:added "1.9"}
  [x] (is? 'Boolean x))

(defn not
  "Returns true if x is logical false, false otherwise."
  {:tag Boolean
   :added "1.0"
   :static true}
  [x] (if x false true))

(defn some?
  "Returns true if x is not nil, false otherwise."
  {:tag Boolean
   :added "1.6"
   :static true}
  [x] (not (nil? x)))

(defn any?
  "Returns true given any argument."
  {:tag Boolean
   :added "1.9"}
  [x] true)

(def
  ^{:tag String
    :added "1.0"
    :static true}
  str
  "With no args, returns the empty string. With one arg x, returns
  x.toString().  (str nil) returns the empty string. With more than
  one arg, returns the concatenation of the str values of the args."
  fmlisp.lang/str)

(defn symbol?
  "Return true if x is a Symbol"
  {:added "1.0"
   :static true}
  [x] (is? 'Symbol x))

(defn keyword?
  "Return true if x is a Keyword"
  {:added "1.0"
   :static true}
  [x] (is? 'Keyword x))

(defmacro cond
  "Takes a set of test/expr pairs. It evaluates each test one at a
  time.  If a test returns logical true, cond evaluates and returns
  the value of the corresponding expr and doesn't evaluate any of the
  other tests or exprs. (cond) returns nil."
  {:added "1.0"}
  [& clauses]
  (when clauses
    (list 'if (first clauses)
          (if (next clauses)
            (second clauses)
            (throw (error "cond requires an even number of forms")))
          (cons 'fmlisp.core/cond (next (next clauses))))))

(defn symbol
  "Returns a Symbol with the given namespace and name. Arity-1 works
  on strings, keywords, and vars."
  {:tag clojure.lang.Symbol
   :added "1.0"
   :static true}
  ([name]
   (cond
     (symbol? name) name
     (string? name) (fmlisp.lang/symbol name)
     :else (throw (error "no conversion to symbol available"))))
  ([ns name] (fmlisp.lang/intern ns name)))

(defn gensym
  "Returns a new symbol with a unique name. If a prefix string is
  supplied, the name is prefix# where # is some unique number. If
  prefix is not supplied, the prefix is 'G__'."
  {:added "1.0"
   :static true}
  ([] (gensym "G__"))
  ([prefix-string] (fmlisp.lang/intern (str prefix-string (str (fmlisp.lang/next-id))))))

(defn keyword
  "Returns a Keyword with the given namespace and name.  Do not use :
  in the keyword strings, it will be added automatically."
  {:added "1.0"}
  ([name] (cond (keyword? name) name
                (symbol? name) (fmlisp.lang/keyword name)
                (string? name) (fmlisp.lang/keyword name)))
  ([ns name] (fmlisp.lang/keyword ns name)))

(defn spread
  {:private true
   :static true}
  [arglist]
  (cond
    (nil? arglist) nil
    (nil? (next arglist)) (seq (first arglist))
    :else (cons (first arglist) (spread (next arglist)))))

(def
  ^{:added "1.0"}
  apply
  "Applies fn f to the argument list formed by prepending intervening arguments to args."
  fmlisp.lang/apply)

(defn vary-meta
  "Returns an object of the same type and value as obj, with
  (apply f (meta obj) args) as its metadata."
  {:added "1.0"
   :static true}
  [obj f & args]
  (with-meta obj (apply f (meta obj) args)))

(defmacro if-not
  "Evaluates test. If logical false, evaluates and returns then expr,
  otherwise else expr, if supplied, else nil."
  {:added "1.0"}
  ([test then] `(if-not ~test ~then nil))
  ([test then else]
   `(if (not ~test) ~then ~else)))

(defn =
  "Equality. Returns true if x equals y, false if not. Same as
  Java x.equals(y) except it also works for nil, and compares
  numbers and collections in a type-independent manner.  Clojure's immutable data
  structures define equals() (and thus =) as a value, not an identity,
  comparison."
  {:added "1.0"}
  ([x] true)
  ([x y] (fmlisp.lang/= x y))
  ([x y & more]
   (if (fmlisp.lang/= x y)
     (if (next more)
       (= y (first more) (next more))
       (fmlisp.lang/= y (first more)))
     false)))

(defn not=
  "Same as (not (= obj1 obj2))"
  {:tag Boolean
   :added "1.0"
   :static true}
  ([x] false)
  ([x y] (not (= x y)))
  ([x y & more]
   (not (apply = x y more))))

(defn compare
  "Comparator. Returns a negative number, zero, or a positive number
  when x is logically 'less than', 'equal to', or 'greater than'
  y. Same as Java x.compareTo(y) except it also works for nil, and
  compares numbers and collections in a type-independent manner. x
  must implement Comparable"
  {:inline (fn [x y] `(. clojure.lang.Util compare ~x ~y))
   :added "1.0"}
  [x y] (fmlisp.lang/compare x y))

(defmacro and
  "Evaluates exprs one at a time, from left to right. If a form
  returns logical false (nil or false), and returns that value and
  doesn't evaluate any of the other expressions, otherwise it returns
  the value of the last expr. (and) returns true."
  {:added "1.0"}
  ([] true)
  ([x] x)
  ([x & next]
   `(let [and# ~x]
      (if and# (and ~@next) and#))))

(defmacro or
  "Evaluates exprs one at a time, from left to right. If a form
  returns a logical true value, or returns that value and doesn't
  evaluate any of the other expressions, otherwise it returns the
  value of the last expression. (or) returns nil."
  {:added "1.0"}
  ([] nil)
  ([x] x)
  ([x & next]
   `(let [or# ~x]
      (if or# or# (or ~@next)))))

(defn pos?
  "Returns true if num is greater than zero, else false"
  {:added "1.0"}
  [num] (fmlisp.lang.numbers/pos? num))

(defn neg?
  "Returns true if num is less than zero, else false"
  {:added "1.0"}
  [num] (fmlisp.lang.numbers/neg? num))

(defn zero?
  "Returns true if num is zero, else false"
  {:added "1.0"}
  [num] (fmlisp.lang.numbers/zero? num))

(defn count
  "Returns the number of items in the collection. (count nil) returns
  0. Also works on strings, sets and Maps"
  {:added "1.0"}
  [coll] (fmlisp.lang/count coll))

(defn int
  "Coerce to int"
  {:added "1.0"}
  [n] (fmlisp.lang.numbers/int n))

(defn nth
  "Returns the value at the index. get returns nil if index out of
  bounds, nth throws an exception unless not-found is supplied.  nth
  also works for strings, Java arrays, regex Matchers and Lists, and,
  in O(n) time, for sequences."
  {:inline (fn  [c i & nf] `(fmlisp.lang/nth ~c ~i ~@nf))
   :inline-arities #{2 3}
   :added "1.0"}
  ([coll index] (fmlisp.lang/nth coll index))
  ([coll index not-found] (fmlisp.lang/nth coll index not-found)))

(def
  ^{:arglists: '([x])
    :doc "Returns a number one greater than num. Does not auto-promote
    longs, will throw on overflow."
    :added "1.0"}
  inc fmlisp.lang.numbers/inc)

(def
  ^{:arglists: '([x])
    :doc "Returns a number one less than num. Does not auto-promote
    longs, will throw on overflow."
    :added "1.0"}
  dec fmlisp.lang.numbers/dec)

(def
  ^{:argslists: '([coll])
    :doc "Returns a seq of the items in coll in reverse order. Not lazy."
    :added "1.0"}
  reverse fmlisp.lang/reverse)

(defn ^:private
  reduce1
  ([f coll]
   (let [s (seq coll)]
     (if s
       (reduce1 f (first s) (next s))
       (f))))
  ([f val coll]
   (let [s (seq coll)]
     (if s
       (reduce1 f (f val (first s)) (next s))
       val))))

(defn cast
  "Throws a ClassCastException if x is not a c, else returns x."
  {:added "1.0"
   :static true}
  [c x] (fmlisp.lang/cast c x))

(defn +
  "Returns the sum of nums. (+) returns 0. Does not auto-promote
  longs, will throw on overflow. See also: +'"
  {:added "1.2"}
  ([] 0)
  ([x] (cast Number x))
  ([x y] (fmlisp.lang.numbers/add x y))
  ([x y & more]
     (reduce1 + (+ x y) more)))

(defn *
  "Returns the product of nums. (*) returns 1. Does not auto-promote
  longs, will throw on overflow. See also: *'"
  {:added "1.2"}
  ([] 1)
  ([x] (cast Number x))
  ([x y] (fmlisp.lang.numbers/multiply x y))
  ([x y & more]
     (reduce1 * (* x y) more)))

(defn /
  "If no denominators are supplied, returns 1/numerator,
  else returns numerator divided by all of the denominators."
  {:added "1.0"}
  ([x] (/ 1 x))
  ([x y] (fmlisp.lang.numbers/divide x y))
  ([x y & more]
   (reduce1 / (/ x y) more)))

(defn -
  "If no ys are supplied, returns the negation of x, else subtracts
  the ys from x and returns the result. Does not auto-promote
  longs, will throw on overflow. See also: -'"
  {:added "1.2"}
  ([x] (fmlisp.lang.numbers/minus x))
  ([x y] (fmlisp.lang.numbers/minus x y))
  ([x y & more]
     (reduce1 - (- x y) more)))

(defn <
  "Returns non-nil if nums are in monotonically increasing order,
  otherwise false."
  {:inline (fn [x y] `(fmlisp.lang/< ~x ~y))
   :inline-arities #{2}
   :added "1.0"}
  ([x] true)
  ([x y] (fmlisp.lang/< x y))
  ([x y & more]
   (if (< x y)
     (if (next more)
       (< y (first more) (rest more))
       (< y (first more)))
     false)))

(defn <=
  "Returns non-nil if nums are in monotonically non-decreasing order,
  otherwise false."
  {:inline (fn [x y] `(fmlisp.lang/<= ~x ~y))
   :inline-arities #{2}
   :added "1.0"}
  ([x] true)
  ([x y] (fmlisp.lang/<= x y))
  ([x y & more]
   (if (<= x y)
     (if (next more)
       (recur y (first more) (next more))
       (<= y (first more)))
     false)))

(defn >
  "Returns non-nil if nums are in monotonically decreasing order,
  otherwise false."
  {:inline (fn [x y] `(fmlisp.lang/> ~x ~y))
   :inline-arities #{2}
   :added "1.0"}
  ([x] true)
  ([x y] (fmlisp.lang/> x y))
  ([x y & more]
   (if (> x y)
     (if (next more)
       (recur y (first more) (next more))
       (> y (first more)))
     false)))

(defn >=
  "Returns non-nil if nums are in monotonically non-increasing order,
  otherwise false."
  {:inline (fn [x y] `(fmlisp.lang/>= (gte ~x ~y)))
   :inline-arities #{2}
   :added "1.0"}
  ([x] true)
  ([x y] (fmlisp.lang/>= (gte x y)))
  ([x y & more]
   (if (>= x y)
     (if (next more)
       (recur y (first more) (next more))
       (>= y (first more)))
     false)))

(defn ==
  "Returns non-nil if nums all have the equivalent
  value (type-independent), otherwise false"
  {:inline (fn [x y] `(fmlisp.lang.numbers/equiv ~x ~y))
   :inline-arities #{2}
   :added "1.0"}
  ([x] true)
  ([x y] (fmlisp.lang.numbers/equiv x y))
  ([x y & more]
   (if (== x y)
     (if (next more)
       (== y (first more) (next more))
       (== y (first more)))
     false)))

(defn max
  "Returns the greatest of the nums."
  {:added "1.0"}
  ([x] x)
  ([x y] (fmlisp.lang.numbers/max x y))
  ([x y & more]
   (reduce1 max (max x y) more)))

(defn min
  "Returns the least of the nums."
  {:added "1.0"}
  ([x] x)
  ([x y] (fmlisp.lang.numbers/min x y))
  ([x y & more]
   (reduce1 min (min x y) more)))

(defn abs
  {:doc "Returns the absolute value of a.
  If a is Integer/MIN_VALUE => Integer/MIN_VALUE
  If a is a Float and zero => +0.0
  If a is a Float and ##Inf or ##-Inf => ##Inf
  If a is a Float and ##NaN => ##NaN"
   :inline-arities #{1}
   :inline (fn [a] `(fmlisp.lang.numbers/abs ~a))
   :added "1.11"}
  [a] (fmlisp.lang.numbers/abs a))

(defn quot
  "quot[ient] of dividing numerator by denominator."
  {:added "1.0"
   :static true
   :inline (fn [x y] `(fmlisp.lang.numbers/quot ~x ~y))}
  [num div]
  (fmlisp.lang.numbers/quot num div))

(defn rem
  "remainder of dividing numerator by denominator."
  {:added "1.0"
   :static true
   :inline (fn [x y] `(fmlisp.lang.numbers/reminder ~x ~y))}
  [num div]
    (fmlisp.lang.numbers/reminder num div))

(defn type
  "Returns the :type metadata of x, or its Type if none"
  {:added "1.0"
   :static true}
  [x]
  (or (get (meta x) :type) (fmlisp.lang/type x)))

;;
;; Bits operations
;;

(defn bit-not
  "Bitwise complement"
  {:inline (fn [x] `(fmlisp.lang.numbers/bit-not ~x))
   :added "1.0"}
  [x] (fmlisp.lang.numbers/bit-not x))


(defn bit-and
  "Bitwise and"
  {:added "1.0"}
  ([x y] (fmlisp.lang.numbers/bit-and x y))
  ([x y & more]
    (reduce1 bit-and (bit-and x y) more)))

(defn bit-or
  "Bitwise or"
  {:added "1.0"}
  ([x y] (fmlisp.lang.numbers/bit-or x y))
  ([x y & more]
    (reduce1 bit-or (bit-or x y) more)))

(defn bit-xor
  "Bitwise exclusive or"
  {:added "1.0"}
  ([x y] (fmlisp.lang.numbers/bit-xor x y))
  ([x y & more]
    (reduce1 bit-xor (bit-xor x y) more)))

(defn bit-and-not
  "Bitwise and with complement"
  {:added "1.0"}
  ([x y] (fmlisp.lang.numbers/bit-and-not x y))
  ([x y & more]
    (reduce1 bit-and-not (bit-and-not x y) more)))

(defn bit-clear
  "Clear bit at index n"
  {:added "1.0"}
  [x n] (fmlisp.lang.numbers/bit-clear x n))

(defn bit-set
  "Set bit at index n"
  {:added "1.0"}
  [x n] (fmlisp.lang.numbers/bit-set x n))

(defn bit-flip
  "Flip bit at index n"
  {:added "1.0"}
  [x n] (fmlisp.lang.numbers/bit-flip x n))

(defn bit-test
  "Test bit at index n"
  {:added "1.0"}
  [x n] (fmlisp.lang.numbers/bit-test x n))

(defn bit-shift-left
  "Bitwise shift left"
  {:inline (fn [x n] `(fmlisp.lang.numbers/bit-shift-left ~x ~n))
   :added "1.0"}
  [x n] (fmlisp.lang.numbers/bit-shift-left x n))

(defn bit-shift-right
  "Bitwise shift right"
  {:inline (fn [x n] `(fmlisp.lang.numbers/bit-shift-right ~x ~n))
   :added "1.0"}
  [x n] (fmlisp.lang.numbers/bit-shift-right x n))

(defn int?
  "Return true if x is a fixed precision integer"
  {:added "1.9"}
  [x] (fmlisp.lang.numbers/int? x))

(defn pos-int?
  "Return true if x is a positive fixed precision integer"
  {:added "1.9"}
  [x] (and (int? x)
           (pos? x)))

(defn neg-int?
  "Return true if x is a negative fixed precision integer"
  {:added "1.9"}
  [x] (and (int? x)
           (neg? x)))

(defn even?
  "Returns true if n is even, throws an exception if n is not an integer"
  {:added "1.0"
   :static true}
   [n] (if (int? n)
        (zero? (bit-and n 1))
        (throw (error (str "Argument must be an integer: " n)))))

(defn odd?
  "Returns true if n is odd, throws an exception if n is not an integer"
  {:added "1.0"
   :static true}
  [n] (not (even? n)))

(defn complement
  "Takes a fn f and returns a fn that takes the same arguments as f,
  has the same effects, if any, and returns the opposite truth value."
  {:added "1.0"
   :static true}
  [f]
  (fn
    ([] (not (f)))
    ([x] (not (f x)))
    ([x y] (not (f x y)))
    ([x y & zs] (not (apply f x y zs)))))

(defn constantly
  "Returns a function that takes any number of arguments and returns x."
  {:added "1.0"
   :static true}
  [x] (fn [& args] x))

(defn identity
  "Returns its argument."
  {:added "1.0"
   :static true}
  [x] x)

(defn pop
  "For a list, returns a new list without the first
  item, for a vector, returns a new vector without the last item. If
  the collection is empty, throws an exception.  Note - not the same
  as next/butlast."
  {:added "1.0"
   :static true}
  [coll] (fmlisp.lang/pop coll))

(defn contains?
  "Returns true if key is present in the given collection, otherwise
  returns false.  Note that for numerically indexed collections like
  vectors and Java arrays, this tests if the numeric key is within the
  range of indexes. 'contains?' operates constant or logarithmic time;
  it will not perform a linear search for a value.  See also 'some'."
  {:added "1.0"
   :static true}
  [coll key] (fmlisp.lang/contains? coll key))

(defn get
  "Returns the value mapped to key, not-found or nil if key not present
  in associative collection, set, string, array, or ILookup instance."
  {:inline (fn  [m k & nf] `(fmlisp.lang/get ~m ~k ~@nf))
   :inline-arities #{2 3}
   :added "1.0"}
  ([map key]
   (fmlisp.lang/get map key))
  ([map key not-found]
   (fmlisp.lang/get map key not-found)))

(defn disj
  "disj[oin]. Returns a new set of the same (hashed/sorted) type, that
  does not contain key(s)."
  {:added "1.0"
   :static true}
  ([set] set)
  ([set key]
   (when set
     (fmlisp.lang/disjoin key)))
  ([set key & ks]
   (when set
     (let [ret (disj set key)]
       (if ks
         (disj ret (first ks) (next ks))
         ret)))))

(defn dissoc
  "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
  that does not contain a mapping for key(s)."
  {:added "1.0"
   :static true}
  ([map] map)
  ([map key]
   (fmlisp.lang/dissoc map key))
  ([map key & ks]
   (let [ret (dissoc map key)]
     (if ks
       (dissoc ret (first ks) (next ks))
       ret))))

(defn keys
  "Returns a sequence of the map's keys, in the same order as (seq map)."
  {:added "1.0"
   :static true}
  [map] (fmlisp.lang/keys map))

(defn vals
  "Returns a sequence of the map's values, in the same order as (seq map)."
  {:added "1.0"
   :static true}
  [map] (fmlisp.lang/vals map))

;; NS functions

; temp
(def ns fmlisp.lang/ns)

(defn all-ns
  "Returns a sequence of all namespaces."
  {:added "1.0"
   :static true}
  [] (fmlisp.lang.namespace/all-ns))

(defn find-ns
  "Returns the namespace named by the symbol or nil if it doesn't exist."
  {:added "1.0"
   :static true}
  [sym] (fmlisp.lang.namespace/find-ns sym))

(defn the-ns
  "If passed a namespace, returns it. Else, when passed a symbol,
  returns the namespace named by it, throwing an exception if not
  found."
  {:added "1.0"
   :static true}
  [x]
  (if (is? 'Namespace x)
    x
    (or (find-ns x) (throw (error (str "No namespace: " x " found"))))))

(defn ns-name
  "Returns the name of the namespace, a symbol."
  {:added "1.0"
   :static true}
  [ns]
  (fmlisp.lang.namespace/ns-name ns))

(defn ns-map
  "Returns a map of all the mappings for the namespace."
  {:added "1.0"
   :static true}
  [ns]
  (fmlisp.lang.namespace/ns-map ns))

(defn ns-unmap
  "Removes the mappings for the symbol from the namespace."
  {:added "1.0"
   :static true}
  [ns sym]
  (fmlisp.lang.namespace/ns-unmap ns sym))

(def
  ^{:docs "Returns a lazy sequence consisting of the result of applying f to
    the set of first items of each coll, followed by applying f to the
    set of second items in each coll, until any one of the colls is
    exhausted.  Any remaining items in other colls are ignored. Function
    f should accept number-of-colls arguments. Returns a transducer when
    no collection is provided."
    :added "1.0"}
  map fmlisp.lang/map)

(defn some
  "Returns the first logical true value of (pred x) for any x in coll,
  else nil.  One common idiom is to use a set as pred, for example
  this will return :fred if :fred is in the sequence, otherwise nil:
  (some #{:fred} coll)"
  {:added "1.0"
   :static true}
  [pred coll]
    (when-let [s (seq coll)]
      (or (pred (first s)) (some pred (next s)))))

(defn intern
  "Finds or creates a var named by the symbol name in the namespace
  ns (which can be a symbol or a namespace), setting its root binding
  to val if supplied. The namespace must exist. The var will adopt any
  metadata from the name symbol. Returns the var."
  {:added "1.0"
   :static true}
  ([name]
     (let [v (fmlisp.lang/intern (the-ns *ns*) name)]
       (when (meta name) (with-meta v (meta name)))
       v))
  ([ns name]
     (let [v (fmlisp.lang/intern (the-ns ns) name)]
       (when (meta name) (with-meta v (meta name)))
       v))
  ([ns name val]
     (let [v (fmlisp.lang/intern (the-ns ns) name val)]
       (when (meta name) (with-meta v (meta name)))
       v)))

(defn format
  "Formats a string with arguments, see Rust `format!` macro for format
  string syntax"
  {:added "1.0"
   :static true}
  [fmt & args]
  (fmlisp.lang/format fmt args))
